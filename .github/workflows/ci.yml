name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository_owner }}/chat_service/chat-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository_owner }}/chat_service/chat-frontend
  MAJOR_VERSION: 1
  MINOR_VERSION: 0
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 빌드 시작 알림
      - name: Notify build start
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*CI 빌드 시작*\n- 브랜치: ${{ github.ref_name }}\n- 커밋: ${{ github.event.head_commit.message }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # GHCR 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 현재 버전 확인 및 증가
      - name: Get current version
        id: version
        run: |
          # API를 통해 현재 태그 목록 가져오기
          TAGS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${{ env.BACKEND_IMAGE_NAME }}/versions" | \
            jq -r '.[].metadata.container.tags[]' | grep "^${MAJOR_VERSION}.${MINOR_VERSION}." || echo "${MAJOR_VERSION}.${MINOR_VERSION}.0")
          
          # 현재 패치 버전 찾기
          CURRENT_PATCH=$(echo "$TAGS" | sort -V | tail -n1 | cut -d. -f3 || echo "0")
          NEW_PATCH=$((CURRENT_PATCH + 1))
          NEW_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${NEW_PATCH}"
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      # 버전 설정 알림
      - name: Notify version
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*새 버전 설정*\n- 버전: ${{ steps.version.outputs.version }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # Backend 이미지 빌드 & 푸시
      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.version.outputs.version }}

      # Backend 빌드 알림
      - name: Notify backend build
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Backend 빌드 상태*\n- 버전: ${{ steps.version.outputs.version }}\n- 상태: ${{ steps.build-backend.outcome }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # 이미지 푸시 확인 및 Slack 알림
      - name: Verify image push and notify
        id: verify-push
        run: |
          # Backend 이미지 확인
          BACKEND_STATUS=$(curl -s -f -L -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ env.BACKEND_IMAGE_NAME }}/manifests/${{ steps.version.outputs.version }}")
          
          # Frontend 이미지 확인
          FRONTEND_STATUS=$(curl -s -f -L -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ env.FRONTEND_IMAGE_NAME }}/manifests/${{ steps.version.outputs.version }}")
          
          # 결과 저장
          echo "backend_exists=$([[ $BACKEND_STATUS == "200" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "frontend_exists=$([[ $FRONTEND_STATUS == "200" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Send push verification result
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "이미지 푸시 확인 결과",
              "username": "GitHub Actions",
              "icon_emoji": ":docker:",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🐳 이미지 푸시 확인 결과",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*버전 ${{ steps.version.outputs.version }} 확인 결과*\n• Backend: ${{ steps.verify-push.outputs.backend_exists && '✅ 성공' || '❌ 실패' }}\n• Frontend: ${{ steps.verify-push.outputs.frontend_exists && '✅ 성공' || '❌ 실패' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # Frontend 이미지 빌드 & 푸시
      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.version }}

      # Frontend 빌드 알림
      - name: Notify frontend build
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Frontend 빌드 상태*\n- 버전: ${{ steps.version.outputs.version }}\n- 상태: ${{ steps.build-frontend.outcome }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # 최종 상태 알림
      - name: Send final status
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "CI 빌드 결과",
              "username": "GitHub Actions",
              "icon_emoji": ":github:",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✨ CI 빌드 최종 결과",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*빌드 상태*\n• 버전: ${{ steps.version.outputs.version || 'N/A' }}\n• Backend: ${{ steps.build-backend.outcome || 'N/A' }}\n• Frontend: ${{ steps.build-frontend.outcome || 'N/A' }}\n• 최종 상태: ${{ job.status }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*최근 Backend 이미지 태그*\n```${{ steps.get-tags.outputs.backend_tags || 'No tags found' }}```"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*최근 Frontend 이미지 태그*\n```${{ steps.get-tags.outputs.frontend_tags || 'No tags found' }}```"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # 이미지 태그 조회
      - name: Get image tags
        id: get-tags
        run: |
          BACKEND_TAGS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${{ env.BACKEND_IMAGE_NAME }}/versions" | \
            jq -r '.[].metadata.container.tags[]' | sort -V | tail -5)
          FRONTEND_TAGS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${{ env.FRONTEND_IMAGE_NAME }}/versions" | \
            jq -r '.[].metadata.container.tags[]' | sort -V | tail -5)
          echo "backend_tags=${BACKEND_TAGS}" >> $GITHUB_OUTPUT
          echo "frontend_tags=${FRONTEND_TAGS}" >> $GITHUB_OUTPUT
